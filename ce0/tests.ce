native pre _{
    #include <string.h>
}

native _{
    FILE* stropen (const char* mode, size_t size, char* str) {
        size = (size != 0) ? size : strlen(str);
        return fmemopen(str, size, mode);
    }
}

type Bool {
    False: ()
    True:  ()
}

func asbool: Int -> Bool {
    return _(arg ? (Bool){True} : (Bool){False})
}

var inp: _(FILE*) = ?
var lin: Int = 1
var col: Int = 1

func lx_blanks: () -> () {
    loop {
        var c: Int = _fgetc _inp
        if asbool _(c == '-') {
            set c = _fgetc _inp
            if asbool _(c == '-') {                 -- ignore comments
                set col = _(col + 1)
                set col = _(col + 1)
                loop {
                    set c = _fgetc _inp
                    if asbool _(c == EOF) {         -- EOF stops comment
                        break
                    }
                    if asbool _(c == '\n') {        -- LN stops comment
                        native _(ungetc(c, inp);)
                        break
                    }
                    set col = _(col + 1)
                }
            } else {
                native _(ungetc(c, inp);)
                native _(ungetc('-', inp);)
                return ()
            }
        } else {
            if asbool _(c == '\n') {                -- ignore new lines
                set lin = _(lin + 1)
                set col = 0
            } else {
                if asbool _(c == ' ') {             -- ignore new spaces
                    set col = _(col + 1)
                } else {
                    native _(ungetc(c, inp);)
                    return ()
                }
            }
        }
    }
}

func t_lexer: () -> () {
    {
        set inp = _{stropen("r", 0, "--foobar")}
        {
            var c: Int = call _fgetc inp
            native _(assert(c == '-');)
            native _(ungetc(c,inp);)
        }
        {
            call lx_blanks ()
            var c: Int = call _fgetc inp
            native _(assert(c == EOF);)
        }
        call _fclose inp
    }
    {
        set inp = _{stropen("r", 0, "-- foobar")}
        set lin = 1;
        set col = 1;
        call lx_blanks ()
        native _(assert(lin == 1);)
        native _(assert(col == 10);)
    }
}

call t_lexer ()
