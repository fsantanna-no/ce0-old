type Bool {
    False: ()
    True:  ()
}

func not: Bool -> Bool {
    if arg {
        return False
    } else {
        return True
    }
}

func check: Bool -> () {
    if not arg {
        call _assert 0
    }
    return ()
}

-------------------------------------------------------------------------------

type Color_ {
    Color_Clear: (Int,Int,Int,Int)
    Color_Draw:  (Int,Int,Int,Int)
}

type Set_ {
    Color: Color_
    Size:  (Int,Int,Int,Int)
    Title: _(char*)
}

type Draw_ {
    Pixel: (Int,Int)
}

type Output {
    Clear:  ()
    Draw:   Draw_
    Set:    Set_
    Update: ()
}

type Event_ {
    KeyDown: Int
}

type Input {
    Delay: Int
    Event: (&Event_,Int)
}

func output: Output -> () {
    native _{
        pico_output(*(Pico_Output*)&arg);
    }
    return ()
}

func input: Input -> Bool {
    native _(
        if (arg.sub == Delay) {
            int ret = pico_input(*(Pico_Input*)&arg);
            return (ret ? (Bool){True} : (Bool){False});
        }
    )
    native _(
        // inp.Event.type = ...
        assert(arg.sub == Event);
        SDL_Event e;
        Pico_Input inp = {PICO_EVENT,.Event={0,arg._Event._2,&e}};
    )
    native _(
        switch (arg._Event._1->sub) {
            case KeyDown:
                inp.Event.type = SDL_KEYDOWN;
                break;
            default:
                assert(0);
        }
    )
    native _(
        int ret = pico_input(inp);
        if (!ret) {
            return (Bool){False};
        }
    )
    native _(
        switch (arg._Event._1->sub) {
            case KeyDown:
                arg._Event._1->_KeyDown = 10;
                break;
            default:
                assert(0);
        }
        return (Bool){True};
    )
}

call _pico_init()

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

-- TITLE
call output Set Title _("pico-Ce")

call show ()

-- CLEAR
call output Set Color Color_Clear (255,255,255,0)
call output Clear
call show ()
call input  Delay 2000
call show ()

-- DRAW_PIXEL
call output Set Color Color_Clear (0,0,0,0)
call output Set Color Color_Draw (255,255,255,0)
call output Clear
call output Draw Pixel (0,0)
call input  Delay 2000
