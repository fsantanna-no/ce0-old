type Bool {
    False: ()
    True:  ()
}

type Set_ {
    Color_BG: (Int,Int,Int,Int)
    Color_FG: (Int,Int,Int,Int)
    Size:     (Int,Int,Int,Int)
    Title:    _(char*)
}

type Draw_ {
    Pixel: (Int,Int)
}

type Output {
    Clear:  ()
    Draw:   Draw_
    Set:    Set_
    Update: ()
}

type Event_ {
    KeyDown: Int
}

type Input {
    Delay: Int
    Event: (&Event_,Int)
}

func output: Output -> () {
    native _{
        pico_output(*(Pico_Output*)&arg);
    }
    return ()
}

func input: Input -> Bool {
    native _{
        SDL_Event e;
        Pico_Input inp = {PICO_EVENT,.Event={0,arg._Event._2,&e}};
    }
    native _{
        // inp.type = ...
        switch (arg._Event._1->sub) {
            case KeyDown:
                inp.Event.type = SDL_KEYDOWN;
                break;
            default:
                assert(0);
        }
    }
    native _{
        int ret = pico_input(inp);
        if (!ret) {
            return (Bool){False};
        }
    }
    native _{
        switch (arg._Event._1->sub) {
            case KeyDown:
                arg._Event._1->_KeyDown = 10;
                break;
            default:
                assert(0);
        }
        return (Bool){True};
    }
}

call _pico_init()

-------------------------------------------------------------------------------

func check: Bool -> () {
    if arg {
    } else {
        call _assert 0
    }
}

call output Set Title _("pico-Ce: Across")

var e: Event_ = KeyDown 0
var ok: Bool = input Event (&e,2000)
call check ok

call show ()

--emit SOUND_PLAY("res/click1.wav");  // plays a starting sound
--
--var integer i;
--loop i in [-25 -> 25] do            // executes 51 times, varying i from -25 to 25
--    emit GRAPHICS_DRAW_PIXEL(i,i);  //   draws a pixel at (i,i)
--    await 100ms;                    //   waits for 100 milliseconds
--end
--
--emit SOUND_PLAY("res/click1.wav");  // plays a terminating sound
--await KEY_PRESS;                    // waits for a key press (any key)

