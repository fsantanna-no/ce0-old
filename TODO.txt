- tipos recursivos
- tupla de tuplas ou de qq coisa que nao seja transformavel em void*
    - vou precisar do ENV
    // TODO: tuples

- MINOR
    - -Wno-format-zero-length
    - types.c
        - types_type: verify if user types exist
        - verify duplicates for types/subtypes/vars/funcs
        - verify assigns, calls args/ret
    - funcoes as values (now we have ENV:var,func,type)
    - funcoes recursivas
        - special rec syntax
        - change env before body
    - assert no EXPR_DISC (gerar erro caso nao seja do subtipo certo)
    - show/cons omit ()
    - type names must contain lowercase (error in C generation upper/lower)


Recursive types
type rec Nat {
    Succ: Nat
}

Constructors from recursive data types require a [pool destination](TODO),
since they allocate memory:

Constants are made static:

```
val n: Nat = Nat.Succ(Nat.Succ(Nil))
```

```
Nat x2 = (Nat) { Succ, {._Succ=NULL} };
Nat x1 = (Nat) { Succ, {._Succ=&x2} };
Nat* n = &x1;
```


```
val n: Nat[] = Succ(Succ(Nil))    -- n is a pool
n = Succ(n)
```


